/home/ericm/tmp/eclipse/sts001/spring_sample
mvn exec:java -Dexec.mainClass="info.shelfunit.runner.Application"

Eclipse notes: control-space to add import for a class name as you type it

https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/
https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/
https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html

Note: To copy a project in STS: The project you want to copy must be open

Spring removes configuration code
We don't want to do things like:
private CustomerRepository custRepo = new HibernateCustomerRepositoryImpl();
when HibernateCustomerRepositoryImpl implements CustomerRepository
HibernateCustomerRepositoryImpl has hard-coded data
And in Application:
CustomerService service = new CustomerServiceImpl();
We are calling specific implementations, we need to call interfaces, 
use Spring to wire implementations

You used to be able to download Spring directly
Now they want you to use Maven/Gradle

Spring Boot is good, but it's a black box

https://spring.io/projects/spring-framework
They really push Spring Boot

XML: some things are easier in XML
Separation of concerns

We will make a new project: spring_sample_xml
We do need an XML, calling it applicationContext.xml is convention
Spring Context is sort of a HashMap
Can simply be a registry
Namespaces aid in configuration/validation

Put it src/main/resources
Spring Tool Suite no longer offers Spring Application Context from wizard

Beans in XML:
Defining beans in xml is like replacing keyword "new"
Define class, use interface
We can use different XML files for diff environments without needing to recompile

2 types of injection: setter injection, constructor injection
They can be used together
For existing code, setter is better
In info/shelfunit/service/CustomerServiceImpl.java
change
private CustomerRepository custRepo = new HibernateCustomerRepositoryImpl();
to 
private CustomerRepository customerRepository;
and add the setter

Constructor injection
Constructor gives a guaranteed contract
Can be used w/setter injection
Index-based, not name-based like setter injection
starting with "0"

Autowiring:
4 ways:
byType (you only get one instance)
byName (will look at args for setter, setter in Java must follow convention, 
as should "name" element of the object to be set)
constructor
no

Annotations (project spring_sample_xml_anno):
https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-annotation-config

still uses XML
Adding a new namespace
<context:component-scan base-package="info.shelfunit" />: tells it which package to search for annotations
package org.springframework.stereotype
3 main annotations (or "stereotype annotations"):
@Component, @Service, @Repository
Pretty much the same
@Component - any POJO
@Service - business logic layer (not web service)
@Repository - data layer

Autowire: better w/annotations
tied to location
Can do autowiring at member variables, constructors, setters
(Doesn't this prevent using different beans in different environments?)
To autowire a member variable, just annotate with @Autowired
@Autowired
private CustomerRepository custRepo;
The component scanner looks through classes and wires stuff w/@Autowired

Java configuration: Latest method (Project spring_sample_java)
no applicationContext.xml
Now we make a class to configure our app and use the annotation
org.springframework.context.annotation.Configuration
@Configuration at class level
Spring beans defined by @Bean
@Bean at method level
setter injection:
Simple as a method call
"mystery" of dependency injection goes away
Note: Many of these beans are singletons
It sets it once, and later calls to getX return cached instance
Constructor injection
Just like setter injection
Autowiring:
Add @ComponentScan( { "some.package.to.look.for.beans", "another.package" } )
Can use @Repository and @Service to do all autowiring with nothing in AppConfig

Bean scopes
scope is not a pattern
Spring implements patterns
Watch Design Patterns in Java (another course)
5 scopes:
1. Singleton - default, valid in any configuration
2. Prototype - also in any config
3. Request - web only
4. Session - web only 
5. Global - web only

Singleton:
Only one instance
Default scope
One instance per container or context
You can do this by adding the @Scope annotation to a class

org.springframework.context.annotation.Scope
Options at org.springframework.beans.factory.config.ConfigurableBeanFactory ("singleton" or "prototype")
If you do not want the raw strings in your annotations
Requires the AOP jar, but thanks to Maven, it should be there
Can also be done w/XML
    <bean name="customerService"
        class="info.shelfunit.service.CustomerServiceImpl" 
        autowire="byType"
        scope="singleton"> 
This does not require the AOP jar
Prototype guarantees a unique instance each time

loading properties:
says it's easier in XML
You need the context namespace, like we have in the "spring_sample_xml_anno" project
But we did it in spring_sample_xml project
<context:property-placeholder location="/path/to/properties.properties" />
I imagine you could either have it look in classpath, or start at the system root

Then to use the properties, use the ${value} syntax to access the properties
<property name="dbUserName" value="${dbUserName}" / >
Or in annotations, you can do this:
@Value( "${dbUserName}" )
private String dbUserName

Java config for properties
Looks complicated
@PropertySource( "path.to.properties" )

@Bean
public static PropertySourcesPlaceholderConfigurer getPropertySourcesPlaceholderConfigurer {
    return new PropertySourcesPlaceholderConfigurer();
}

@Value( "${dbUserName}" )
private String dbUserName
This will be done in spring_sample_java


