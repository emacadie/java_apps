https://junit.org/junit5/docs/current/user-guide/
https://junit.org/junit5/docs/5.6.2/user-guide/
https://junit.org/junit5/
API: https://junit.org/junit5/docs/current/api/
https://junit.org/junit5/docs/5.6.0/api/
https://junit.org/junit5/docs/5.6.2/api/

On my system, reports at
file:///home/ericm/github/java_apps/junit5/build/reports/tests/test/index.html
Jacoco reports at
file:///home/ericm/github/java_apps/junit5/build/reports/jacoco/test/html/index.html

gradle build
gradle test
gradle jacocoTestReport


Tests should be easy to understand, easy to read and easy to modify
I guess that eliminates mocking and stubbing

Types of test:
black box, white box: Determined by knowledge of internals of system
This course focuses on unit test

Tests should be automated, repeatable, fast
To test databases: http://dbunit.sourceforge.net/
Integration tests: Test how components work together (like web services, databases)

Why are tests important?
reduce debugging time
serve as documentation (but what calls the code you're testing?)
help to improve design

JUnit 5 has three modules:
JUnit Platform
JUnit Jupiter
JUnit Vintage

JUnit5 architecture:
one jar, not very flexible, tightly coupled
lots of tools did reflection and looked at private variables
now we have separation of concerns
1. API to write tests
2. Mechanism to discover and run tests
3. API to run tests (for tools)
decouple execution and definition
preference for extension points

JUnit Platform - API to launch tests (console, IDE, others) and to develop testing framework
JUnit Jupiter - for writing tests and extensions, and platform to run Jupiter tests on platform
JUnit Vintage (runs JUnit 3 & 4 tests)

Test method phases:
1. set up objects you need for test
2. perform an action
3. check if result was what you expect

or phrase it this way:
1. arrange
2. act
3. assert
4. annihilation (put system back in state you found it) usually automatic for Java (garbage collection)

lifecycle:
Test fixture: creating objects for test
transient fresh
persistence fresh
persistence shared
annotations:
In org.junit.jupiter.api I think
@AfterEach @BeforeEach: once per method
@AfterAll @BeforeAll: once per class

by default: JUnit creates new instance of each test class before each test (seems inefficient, even if it is clean)
seems inefficient
You can change this to per class:
@org.junit.jupiter.api.TestInstance(TestInstance.Lifecycle.PER_METHOD)
@org.junit.jupiter.api.TestInstance(TestInstance.Lifecycle.PER_CLASS)
You can also do this with JVM property -Djunit.jupiter.testinstance.lifecycle.default=per_method (or per_class)
Can also be set in junit-platform.properties in root of classpath

convention is to make a null variable to hold class
and put constructor call in @BeforeEach setUp

Maybe I am not the sharpest knife in the drawer, but I am not sure I see the point of @Nested classes and tests
Why not just create the inputs in the test method? It would be fewer lines of code.

combining @Nested with @DisplayName you could make "given", "when", "then" lines like Cucumber
given: @BeforeEach setUp
then: @Test
or:
given: @Nested class
given: @Nested class inside that one
when: @BeforeEach setUp in nested nested class
then: @Test
or:
given: @Nested
when and then: @Test
used in BDD - application is specified and designed by describing how it should behave
Test phase to BDD:
arrange -> given
act -> when
assert -> then

nested test classes:
use non-static inner classes - @BeforeAll and @AfterAll won't work by default (only w/Lifecycle.PER_CLASS, which can override)
use w/@DisplayName

assertions:
good test should have one act and one assert operation
also said you can have one act and multiple assertions
but not multiple actions

assertAll
assertArrayEquals
assertEquals
assertFalse
assertIterableEquals
assertLinesMatch
assertNotEquals
assertNotNull
assertNotSame
assertNull
assertSame
assertThrows
assertTimeout
assertTimeoutPreemptively
assertTrue
fail

External Assertion Libraries:
AssertJ
Hamcrest

assertions: usually first arg is expected, second is what you got,
optional third is an error message if something is wront
() -> {
    System.out.println( "Lazy loaded" );
    return "Error, the product ID is incorrect"; // this goes in stack trace
}

Multiple assertions? Use Assertions.assertAll and lambdas
If one fails, others will still be executed

to disable tests:
use annotation  org.junit.jupiter.api.Disabled on methods or classes
Like Spock's Ignore
There is also
DisabledIf
DisabledIfEnvironmentVariable
DisabledIfSystemProperty
Unlike commenting out @Test, @Disabled forces you to give a reason

org.junit.jupiter.api.Assumptions
Failed Assumptions do not result in a test failure, only failed assertions

You can put assumptions in setUp to control if a test should be run

They like the org.junit.jupiter.api.function.Executable interface
use it to create lambdas as an arg

Other annotations:
@ExtendWith
@ParameterizedTest
@RepeatedTest
@Tag
@TestFactory
@TestTemplate

For interfaces, methods w/@BeforeAll and @AfterAll must be static
use @TestInstance(Lifecycle.PER_CLASS)

How to repeat a test?
@RepeatedTest
You can give a custom name to each test
If you use @RepeatedTest, you do not need @Test

We can create tests at runtime
DynamicTests (like generative tests?), Parameterized Test
Use method annotated with @TestFactory to create dynamic tests
method cannot be private or static
as your source, use Collection, something that implements Iterable, Iterator, or Stream
DynamicContainer contains dynamic tests, or other DynamicContainer instances
From API for DynamicContainer: It is composed of a display name and an Iterable or Stream of DynamicNodes.

DynamicTest: has a display name and Executable (functional interface)
@BeforeEach and @AfterEach are not executed for dynamic tests
no lifecycle methods for dynamic tests

If one dynamic test fails, others will still run
@BeforeEach will only get executed once

parameterized tests
@ParameterizedTest annotation, kind of a replacement/alternative for @Test
you need to declare a source

May need to add a new dependency: org.junit.jupiter, junit-jupiter-params, 5.2.6
(included these days)
parameterized tests can have a custom display name

parameters can only be injected into test methods, not lifecycle methods
@TestInfo and @TestReporter can inject info into many test and lifecycle methods
(these must come after parameters injected into a test)

Like dynamic tests, if one of the parameterized tests fails, the others still run
using @DisplayName will give a name for the test container for the parameterized tests
to give names for each test, use "name" attribute of @ParameterizedTest

I need to look into @TestReporter. I am not seeing it in the output.

also: gradle build and gradle test only seem to run tests if there is a change
or if I delete the report folder
rm -rvf build/reports
Maybe re-running tests sounds strange, but I prefer the computer do what I want
I could do gradle clean or --rerun-tasks or "gradle cleanTest test"
or "gradle cleanTest test --no-build-cache"
or add this to build.gradle: test.outputs.upToDateWhen {false}
https://stackoverflow.com/questions/29427020/how-to-run-gradle-test-when-all-tests-are-up-to-date
Great answer!!! Passed it using a parameter: gradle test -Prerun-tests.
Code in build.gradle: if ( project.hasProperty( "rerun-tests" ) ) { 	test.outputs.upToDateWhen { false } }
Or  in build.gradle
test {
    dependsOn 'cleanTest'
    // Your previous task details (if any)
}
StackOverflow references https://blog.gradle.org/stop-rerunning-tests
But I am not in prod w/this, so what's the big deal?

Argument sources:
at least one source
source must provide values for all parameters
one execution for each group of arguments
@ValueSource: arrays of primitives, used on methods w/single param
@EnumSource: optional: Names of values, mode, used on methods w/single param
@MethodSource: methods will provide arg
methods w/one param: return Stream of parameter type or primitive types
methods w/multiple params: return a Stream, Iterable, Iterator or array of type args
methods used must be static (unless using @TestInstance(Lifecycle.PER_CLASS))
@CsvSource: param for delimiter
@CsvFileSource: files must be on classpath, params for encoding, line separator, delimiter
each line is one invocation
@ArgumentsSource: for custom sources; you need to implement ArgumentsProvider interface, returns a Stream

argument conversion:
just for @ValueSource, @CsvSource, @CsvFileSource
implicitly: String can be converted to primitive types, Enum, java.time classes
see section 2.15.4. Argument Conversion in JUnit user guide
You can come up with your own using @ConvertWith and implementing Interface ArgumentConverter
or extend SimpleArgumentConverter


JUnit extensions, extension points
parameter resolution, meta-annotations, keeping state

JUnit design principle: prefer extension points over features

3 types of interfaces:
1. General purpose (like TestInstancePostProcessor, ParamterResolvers)
2. Conditional (ExecutionCondition)
3. Lifecycle callbacks (BeforeAllCallback, AfterAllCallback. BeforeEachCallback, AfterEachCallback)
and there are others

Extension Registration:
Explicit w/@ExtendWith
or globally with java.util.ServiceLoader (this requires a lot of work, a file in META-INF)
@ExtendWith is repeatable, so a class (or method) could do this:
@ExtendWith( FirstExtension.class )
@ExtendWith( SecondExtension.class )

Parameter injection
Test information parameters: RepetitionInfo, TestInfo, TestReporter
they are injected with interface ParameterResolver
you can inject params into lifecycle methods, constructors, and methods annotated with @Test and @TestFactory

Meta-annotations - you can define your own annotations
by combining built-in annotations, like Groovy

extensions must be stateless
There is a store to store key-value pairs
There is a hierarchy of contexts: MethodExtensionContext, ClassExtensionContext, JupiterEngineExtensionContext
each has a reference to its parent
the store uses keys and values like a Map, but it is not a Map. It has other methods.

having issues with keeping state; tutorial relies on a private API

Sample extensions:
They look at
https://github.com/junit-team/junit5/blob/main/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java
https://github.com/junit-team/junit5/wiki/Third-party-Extensions
https://github.com/junit-team/junit5-samples - different samples now

Running JUnit on command line (I have not tried in IntelliJ)
Command line runner:
https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/
java -jar /home/ericm/jar.files/junit-platform-console-standalone-1.7.0-M1.jar -cp build/classes/java/main:build/classes/java/test --scan-classpath
java -jar /home/ericm/jar.files/junit-platform-console-standalone-1.7.0-M1.jar -cp build/classes/java/main:build/classes/java/test:build/resources/test --scan-classpath
You could add "-details none" at the end to see less

Tags: There is the @Tag annotation that you can apply to a test class
You can use this to only run certain tests
cannot be null or blank, have whitespace, ISO control characters, or reserved characters: comman (, ), &, |, !

look at mutation testing

JUnit5: new package: org.junit.jupiter
You can use JUnit4 and JUnit5
JUnit4: Test methods must be public
Different lifecycle annotations
Use @Ignore instead of @Disable
Use @Category instead of @Tag

new in JUnit 5:
nested tests
custom display names
Java 8 support
parameter injection
dynamic and parameterized tests
meta-annotations

No need to upgrade all your tests at once
JUnit Vintage engine can run JUnit 4 tests



