Maven fundamentals


set M2_HOME=C:\apache-maven-3.0.4
REM set JAVA_HOME=C:\Oracle\Middleware\jrockit_160_29_D1.2.0-10
set JAVA_HOME=C:\Oracle\Middleware\jdk-9.0.4
%M2_HOME%\bin\mvn compile

Build tool
Produces an artifact.
Helps you manage dependencies.
Project management tool.
Handles versioning.

Why?
Repeatable builds
Transitive dependencies: Your dependencies may have dependencies. Maven does that for you.
Maven uses a local repo. You don't need the same JAR for multiple projects.
Can be used alone (CLI) or with an IDE.

Ant: No thank you.
Ant is brittle, many projects are one-offs (not many standards).
Not much re-use.
Maven is consistent across projects, can inherit poms, transitive dependencies (how many times will that get mentioned?)
Maven: Steep learning curve, black box, convention over configuration (great if you do things the Maven way)
Less overhead w/repos, IDE integration
Ant is clear and straightforward, lots of copy and paste, large projects
Ant: You need to make sure things are done in proper order

Making a sample POM:
https://maven.apache.org/guides/introduction/introduction-to-the-pom.html

Need to add a section to pom file for source version. Need to add a buld section and a plugin. I think this is for Java 10 and beyond.
http://maven.apache.org/plugins/maven-compiler-plugin/
For compiler plugin, I think
<configuration>
	<release>10</release>
</configuration>
makes it use JDK 10. There are example pages using different tags within <configuration>, but it would be nice if there was a list of them. Maybe I just don't think the way other people do, but it is amazing that people love to make things difficult.

Might be helpful:
https://www.baeldung.com/maven-compiler-plugin

Apparently, you need to look at the source for the MOJO, according to this:
http://maven.apache.org/guides/mini/guide-configuring-plugins.html

https://github.com/apache/maven-compiler-plugin/blob/master/src/main/java/org/apache/maven/plugin/compiler/AbstractCompilerMojo.java
The javadoc for the MOJO on the Apache page is NOT helpful.
One of the examples on the Maven site has this in <configuration>
<configuration>
  <verbose>true</verbose>
  <fork>true</fork>
  <executable><!-- path-to-javac --></executable>
  <compilerVersion>1.3</compilerVersion>
</configuration>
AbstractCompilerMojo has @Parameter annotations with "property" values like: 
maven.compiler.verbose
maven.compiler.fork
maven.compiler.executable
maven.compiler.compilerVersion

Here is the list of all 24:
@Parameter( property = "maven.compiler.failOnError", defaultValue = "true" )
@Parameter( property = "maven.compiler.failOnWarning", defaultValue = "false" )
@Parameter( property = "maven.compiler.debug", defaultValue = "true" )
@Parameter( property = "maven.compiler.parameters", defaultValue = "false" )
@Parameter( property = "maven.compiler.verbose", defaultValue = "false" )
@Parameter( property = "maven.compiler.showDeprecation", defaultValue = "false" )
@Parameter( property = "maven.compiler.optimize", defaultValue = "false" )
@Parameter( property = "maven.compiler.showWarnings", defaultValue = "false" )
@Parameter( property = "maven.compiler.source", defaultValue = DEFAULT_SOURCE )
@Parameter( property = "maven.compiler.target", defaultValue = DEFAULT_TARGET )
@Parameter( property = "maven.compiler.release" )
@Parameter( property = "encoding", defaultValue = "${project.build.sourceEncoding}" )
@Parameter( property = "lastModGranularityMs", defaultValue = "0" )
@Parameter( property = "maven.compiler.compilerId", defaultValue = "javac" )
@Parameter( property = "maven.compiler.compilerVersion" )
@Parameter( property = "maven.compiler.fork", defaultValue = "false" )
@Parameter( property = "maven.compiler.meminitial" )
@Parameter( property = "maven.compiler.maxmem" )
@Parameter( property = "maven.compiler.executable" )
@Parameter( property = "maven.compiler.debuglevel" )
@Parameter( defaultValue = "${reuseCreated}", property = "maven.compiler.compilerReuseStrategy" )
@Parameter( defaultValue = "false", property = "maven.compiler.skipMultiThreadWarning" )
@Parameter( defaultValue = "false", property = "maven.compiler.forceJavacCompilerUse" )
@Parameter( defaultValue = "true", property = "maven.compiler.useIncrementalCompilation" )
Another one is compilerArgs:
<compilerArgs>
   <arg>-Xmaxerrs</arg>
   <arg>1000</arg>
   <arg>-Xlint</arg>
   <arg>-J-Duser.language=en_us</arg>
 </compilerArgs>
This one is a List of strings

Folder structure:
src/main/java - Java files. Package directories start here.
or src/main/groovy for groovy
src/main/resources - configs
src/test/java - Java test files - not intended for integration tests (so where do those go?)
src/test/groovy
class files go in target/classes
target is where tests get run from
target/test-classes
pom.xml is in root


Dependencies:
naming convention: groupId, artifactId, version

Goals:
Are those like commands?
clean - deletes target directory
compile - compile and build artifacts
package - runs compile, runs unit tests
install - runs package, and install the jar/war in your local repository (on your PC)
deploy - not deploy to an app server, runs install, and deploys artifact to a corporate or remote repo
install is local, deploy is remote install

Commands:
clean - the first time it will get stuff from the central repo for Maven plugins. Deletes any class files
compile - compiles source code, may download dependencies, plugins as well
package - will make a JAR file for use

Defaults: Can they be overridden?
use the build section.

Versions: Your artifact should start out as a SNAPSHOT
"SNAPSHOT" should be all caps. Maven may re-download a new version of a snapshot (even if it has same name). This can be configured in the "repository" section in XML
Release does not need to follow a particular convention.
Some industry standards can be done with Maven, but are not enforced.
You may see milestones "M1", or "RC1" for release candidates, some with add "RELEASE" or "FINAL" for actual releases.

packaging types: pom, jar, war, ear, maven-plugin, rar, par, ejb
jar is the default

transitive dependencies: main reason to use maven. Your dependencies may themselves have dependencies. Conflicts usually resolved by picking latest version.

scopes: Never heard of this before. 6 of them. See https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
1. compile (default)
2. provided: similar to compile. 
3. runtime: needed for execution, but not compile, needed for app to run
4. test
5. system (says to never use this) hard coding a path to a JAR on a filesystem
6. import (advanced)

repositories:
dependency repo, plugin repo, releases/snapshots may be in different repositories
local repository: On your machine> $USER/.m2/repository
Maven will look here first.
repos are http-accessible locations. Default is defined in super pom.xml located inside our maven installation. No need to edit this. Points to repo.maven.apache.org, which has 95% of what you will need.
You can have multiple repos.
Nexus is a popular one, artifactory, now we have JFrog

Sometimes you will see folders with misspellings
https://repo.spring.io/libs-snapshot/ has "org", "ORG", "Org" and "orG"
They don't go away, so be careful with your typing
The main repo does not allow you to pull down snapshots

plugin repos just have plugins
In "pluginRepositories" element (with sub-element pluginRepository). Other sub-elements pretty much the same.
Releases and snapshots can come from same repo.

plugins:
goals, phases, compiler plugin, jar plugin, sources plugin, javadoc plugin
Goals: just plugins in the maven install: clean, compile, test, package, install, deploy
Some of these are in the super pom
You may want a plugin to only run in certain phases. Goals are tied to a phase.

phase:
validate: makes sure everything is ready to go
compile: compiles our source code
test: tests compiled source code, and compiles the test code
package: packages codes into specified package type (such as JAR)
integration-test: will deploy and run integration tests
verify: Runs checks against our project - verify integrity
install: package, puts in local repo
deploy: copies up to remote repo

Compiler plugin:
used for both source and test, runs in different phases for each
invokes javac, sets classpath w/dependencies
defaults to java 1.7
We can configure it: fork, memory, source and target directories

jar plugin: packages code into a jar file
usually tied to package phase
configure: can include/exclude dependency jars, control manifest

source plugin: packages source code
tied to package phase, sometimes overridden to a later phase

javadoc plugin: puts javadoc in a jar
usually package phase, can tie to a later phase if it starts taking a long time



